<?php

/**
 * @file
 * Enables your site to capture votes on different topics in the form of multiple
 * choice questions.
 */

//Load helper functions
require_once('advanced_poll-help-func.php');

/**
 * Implements hook_help().
 */
function advanced_poll_help($path, $arg) {
  switch ($path) {
    case 'admin/help#advanced_poll':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Advanced Poll module can be used to create simple surveys or questionnaires that display cumulative results. A poll is a good way to receive feedback from site users and community members.') . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Creating a poll') . '</dt>';
      $output .= '<dd>' . t('Users can create a poll by clicking on Advanced Poll on the <a href="@add-content">Add new content</a> page, and entering the question being posed, the answer choices, and beginning vote counts for each choice. The status (closed or active) and poll open and close dates can also be specified. There is 3 display types of result: default (text), bar chart and pie chart. There is 2 choice when to show the result: after the user voted or after the poll is closed (On the poll view page the date is displayed when the results will be available).', array('@add-content' => url('node/add'))) . '</dd>';
      $output .= '<dt>' . t('Poll restricions') . '</dt>';
      $output .= '<dd>' . t('Vote on a poll can be restriction for all users or only authenticated users.') . '</dd>';
      $output .= '<dt>' . t('Viewing polls') . '</dt>';
      $output .= '<dd>' . t('You can visit the <a href="@advanced_poll">Advanced Polls</a> page to view all current polls, or alternately enable the <em>Most recent poll</em> block on the <a href="@blocks">Blocks administration page</a>. To vote in or view the results of a specific poll, you can click on the poll itself.', array('@advanced_poll' => url('advanced_poll'), '@blocks' => url('admin/structure/block'))) . '</dd>';
      $output .= '</dl>';
      return $output;
  }
}

/**
 * Implements hook_theme().
 */
function advanced_poll_theme() {
  $theme_hooks = array(
    'advanced_poll_vote' => array(
      'template' => 'advanced_poll-vote',
      'render element' => 'form',
    ),
    'advanced_poll_choices' => array(
      'render element' => 'form',
    ),
    'advanced_poll_results' => array(
      'template' => 'advanced_poll-results',
      'variables' => array('show_result' => NULL, 'raw_title' => NULL, 'results' => NULL, 'votes' => NULL, 'raw_links' => NULL, 'block' => NULL, 'nid' => NULL, 'vote' => NULL),
    ),
    'advanced_poll_bar' => array(
      'template' => 'advanced_poll-bar',
      'variables' => array('title' => NULL, 'votes' => NULL, 'total_votes' => NULL, 'vote' => NULL, 'block' => NULL),
    ),
  );
  // The theme system automatically discovers the theme's functions and
  // templates that implement more targeted "suggestions" of generic theme
  // hooks. But suggestions implemented by a module must be explicitly
  // registered.
  $theme_hooks += array(
    'advanced_poll_results__block' => array(
      'template' => 'advanced_poll-results--block',
      'variables' => $theme_hooks['advanced_poll_results']['variables'],
    ),
    'advanced_poll_bar__block' => array(
      'template' => 'advanced_poll-bar--block',
      'variables' => $theme_hooks['advanced_poll_bar']['variables'],
    ),
  );
  return $theme_hooks;
}

/**
 * Implements hook_permission().
 */
function advanced_poll_permission() {
  $perms = array(
    'vote on polls' => array(
      'title' => t('Vote on polls'),
    ),
    'cancel own vote' => array(
      'title' => t('Cancel and change own votes'),
    ),
    'inspect all votes' => array(
      'title' => t('View details for all votes'),
    ),
  );

  return $perms;
}

/**
 * Implements hook_menu().
 */
function advanced_poll_menu() {
  $items['advanced_poll'] = array(
    'title' => 'Advanced Polls',
    'page callback' => 'advanced_poll_page',
    'access arguments' => array('access content'),
    'type' => MENU_SUGGESTED_ITEM,
    'file' => 'advanced_poll.pages.inc',
  );

  $items['node/%node/votes'] = array(
    'title' => 'Votes',
    'page callback' => 'advanced_poll_votes',
    'page arguments' => array(1),
    'access callback' => '_advanced_poll_menu_access',
    'access arguments' => array(1, 'inspect all votes', FALSE),
    'weight' => 3,
    'type' => MENU_LOCAL_TASK,
    'file' => 'advanced_poll.pages.inc',
  );

  $items['node/%node/results'] = array(
    'title' => 'Results',
    'page callback' => 'advanced_poll_results',
    'page arguments' => array(1),
    'access callback' => '_advanced_poll_menu_access',
    'access arguments' => array(1, 'access content', TRUE),
    'weight' => 3,
    'type' => MENU_LOCAL_TASK,
    'file' => 'advanced_poll.pages.inc',
  );

  return $items;
}

/**
 * Callback function to see if a node is acceptable for poll menu items.
 */
function _advanced_poll_menu_access($node, $perm, $inspect_allowvotes) {
  return user_access($perm) && ($node->type == 'advanced_poll') && ($node->allowvotes || !$inspect_allowvotes);
}

/**
 * Implements hook_block_info().
 */
function advanced_poll_block_info() {
  $blocks['recent']['info'] = t('Most recent poll');
  $blocks['recent']['properties']['administrative'] = TRUE;
  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * Generates a block containing the latest poll.
 */
function advanced_poll_block_view($delta = '') {
  if (user_access('access content')) {
    // Retrieve the latest poll.
    $select = db_select('node', 'n');
    $select->join('advanced_poll', 'p', 'p.nid = n.nid');
    $select->fields('n', array('nid'))
      ->condition('n.status', 1)
      ->condition('p.active', 1)
      ->orderBy('n.created', 'DESC')
      ->range(0, 1)
      ->addTag('node_access');

    $record = $select->execute()->fetchObject();
    if ($record) {
      $poll = node_load($record->nid);
      if ($poll->nid) {
        $poll = advanced_poll_block_latest_advanced_poll_view($poll);
        $block['subject'] = t('Advanced Poll');
        $block['content'] = $poll->content;
        return $block;
      }
    }
  }
}

/**
 * Implements hook_cron().
 * Closes polls that have exceeded their allowed runtime.
 */
function advanced_poll_cron() {
  $nids = db_query('SELECT 
                      p.nid, p.active, p.use_open_date, p.open_date, p.use_close_date, p.close_date
                    FROM 
                      {advanced_poll} p 
                    INNER JOIN 
                      {node} n
                    WHERE 
                      ( p.use_open_date = 1 OR p.use_close_date = 1 ) ')->fetchAllAssoc('nid', PDO::FETCH_ASSOC);
 
  foreach ( $nids as $nid ) {
    //check dates
    echo $active = check_poll_date( $nid );
    
    //only update if needed
    if ( $active != $nid['active'] )
      db_update('advanced_poll')
        ->fields(array('active' => $active))
        ->condition('nid', $nid['nid'] )
        ->execute();
  }

}

/**
 * Implements hook_node_info().
 */
function advanced_poll_node_info() {
  return array(
    'advanced_poll' => array(
      'name' => t('Advanced Poll'),
      'base' => 'advanced_poll',
      'description' => t('A <em>poll</em> is a question with a set of possible responses. A <em>poll</em>, once created, automatically provides a simple running count of the number of votes received for each response.'),
      'title_label' => t('Question'),
      'has_body' => FALSE,
    )
  );
}

/**
 * Implements hook_field_extra_fields().
 */
function advanced_poll_field_extra_fields() {
  $extra['node']['advanced_poll'] = array(
    'form' => array(
      'choice_wrapper' => array(
        'label' => t('Advanced Poll choices'),
        'description' => t('Advanced Poll choices'),
        'weight' => -4,
      ),
      'settings' => array(
        'label' => t('Advanced Poll settings'),
        'description' => t('Advanced Poll module settings'),
        'weight' => -3,
      ),
      'restrictions' => array(
        'label' => t('Advanced Poll restrictions'),
        'description' => t('Advanced Poll restrictions'),
        'weight' => -3,
      ),
    ),
    'display' => array(
      'advanced_poll_view_voting' => array(
        'label' => t('Advanced Poll vote'),
        'description' => t('Advanced Poll vote'),
        'weight' => 0,
      ),
      'advanced_poll_view_results' => array(
        'label' => t('Advanced Poll results'),
        'description' => t('Advanced Poll results'),
        'weight' => 0,
      ),
    )
  );

  return $extra;
}

/**
 * Implements hook_form().
 */
function advanced_poll_form($node, &$form_state) {
  global $user;

  $admin = user_access('bypass node access') || user_access('edit any poll content') || (user_access('edit own poll content') && $user->uid == $node->uid);

  $type = node_type_get_type($node);

  // The submit handlers to add more poll choices require that this form is
  // cached, regardless of whether Ajax is used.
  $form_state['cache'] = TRUE;

  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => check_plain($type->title_label),
    '#required' => TRUE,
    '#default_value' => $node->title,
    '#maxlength' => 255,
    '#weight' => -5,
  );

  if (isset($form_state['choice_count'])) {
    $choice_count = $form_state['choice_count'];
  }
  else {
    $choice_count = max(2, empty($node->choice) ? 2 : count($node->choice));
  }

  // Add a wrapper for the choices and more button.
  $form['choice_wrapper'] = array(
    '#tree' => FALSE,
    '#weight' => -4,
    '#prefix' => '<div class="clearfix" id="advanced_poll-choice-wrapper">',
    '#suffix' => '</div>',
  );

  // Container for just the poll choices.
  $form['choice_wrapper']['choice'] = array(
    '#prefix' => '<div id="advanced_poll-choices">',
    '#suffix' => '</div>',
    '#theme' => 'advanced_poll_choices',
  );

  // Add the current choices to the form.
  $delta = 0;
  $weight = 0;
  if (isset($node->choice)) {
    $delta = count($node->choice);
    foreach ($node->choice as $chid => $choice) {
      $key = 'chid:' . $chid;
      $form['choice_wrapper']['choice'][$key] = _advanced_poll_choice_form($key, $choice['chid'], $choice['chtext'], $choice['chvotes'], $choice['weight'], $choice_count);
      $weight = max($choice['weight'], $weight);
    }
  }

  // Add initial or additional choices.
  $existing_delta = $delta;
  for ($delta; $delta < $choice_count; $delta++) {
    $key = 'new:' . ($delta - $existing_delta);
    // Increase the weight of each new choice.
    $weight++;
    $form['choice_wrapper']['choice'][$key] = _advanced_poll_choice_form($key, NULL, '', 0, $weight, $choice_count);
  }

  // We name our button 'advanced_poll_more' to avoid conflicts with other modules using
  // Ajax-enabled buttons with the id 'more'.
  $form['choice_wrapper']['advanced_poll_more'] = array(
    '#type' => 'submit',
    '#value' => t('More choices'),
    '#attributes' => array(
      'title' => t("If the amount of boxes above isn't enough, click here to add more choices."),
    ),
    '#weight' => 1,
    '#limit_validation_errors' => array(array('choice')),
    '#submit' => array('advanced_poll_more_choices_submit'),
    '#ajax' => array(
      'callback' => 'advanced_poll_choice_js',
      'wrapper' => 'advanced_poll-choices',
      'effect' => 'fade',
    ),
  );

  /*
  * Advanced Poll attributes
  */
  $active = array(0 => t('Closed'), 1 => t('Active'));
  $display_type = array(0 => t('Default'), 1 => t('Bar chart'), 2 => t('Pie chart'));
  $when2show_result = array(0 => t('After user vote'), 1 => t('Poll is closed'));
  $vote_on_poll = array(0 => t('Anonymous and authenticated users'), 1 => t('Only authenticated users'));
  $restrictions = array(0 => t('Anonymous and authenticated users'), 1 => t('Only authenticated users'));
  
  $form['restrictions'] = array(
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#title' => t('Advanced Poll restrictions'),
    '#weight' => -3,
    '#access' => $admin,
  );

  $form['restrictions']['vote_on_poll'] = array(
    '#type' => 'radios',
    '#title' => t('Vote on poll'),
    '#default_value' => isset($node->vote_on_poll) ? $node->vote_on_poll : 0,
    '#options' => $restrictions,
    '#description' => t('Set restriction who can vote on poll. Admins always can vote on poll.'),
    '#access' => $admin,
  );

  $form['settings'] = array(
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#title' => t('Advanced Poll settings'),
    '#weight' => -3,
    '#access' => $admin,
  );

  $form['settings']['display_type'] = array(
    '#type' => 'radios',
    '#title' => t('Advanced Poll result display type'),
    '#default_value' => isset($node->display_type) ? $node->display_type : 0,
    '#options' => $display_type,
    '#description' => t('Set the way the result is displayed.'),
    '#access' => $admin,
  );

  $form['settings']['when2show_result'] = array(
    '#type' => 'radios',
    '#title' => t('Show result'),
    '#default_value' => isset($node->when2show_result) ? $node->when2show_result : 0,
    '#options' => $when2show_result,
    '#description' => t('When to display the results.'),
    '#access' => $admin,
  );

  $form['settings']['active'] = array(
    '#type' => 'radios',
    '#title' => t('Advanced Poll status'),
    '#default_value' => isset($node->active) ? $node->active : 1,
    '#options' => $active,
    '#description' => t('When a poll is closed, visitors can no longer vote for it.'),
    '#access' => $admin,
  );

  $form['settings']['use_open_date'] = array(
    '#type' => 'radios',
    '#title' => t('Use `Open Poll on`'),
    '#default_value' => isset($node->use_open_date) ? $node->use_open_date : 0,
    '#options' => array(0 => t('No'), 1 => t('Yes')),
    '#description' => t('Allow the system to automatically open the poll on a given date.'),
    '#access' => $admin,
  );

  $form['settings']['open_date'] = array(
    '#type' => 'date',
    '#title' => t('Open Poll on'),
    '#value' => date2array( isset($node->open_date) ? $node->open_date : '' ),
    '#description' => t('The poll will be open automatically on this date.'),
    '#access' => $admin,
  );

  $form['settings']['use_close_date'] = array(
    '#type' => 'radios',
    '#title' => t('Use `Close Poll on`'),
    '#default_value' => isset($node->use_close_date) ? $node->use_close_date : 0,
    '#options' => array(0 => t('No'), 1 => t('Yes')),
    '#description' => t('Allow the system to automatically close the poll on a given date.'),
    '#access' => $admin,
  );  

  $form['settings']['close_date'] = array(
    '#type' => 'date',
    '#title' => t('Close Poll on'),
    '#value' => date2array( isset($node->close_date) ? $node->close_date : '' ),
    '#description' => t('The poll will be closed automatically on this date.'),
  );

  //add javascript to form
  $form['#attached']['js'] = array(
    drupal_get_path('module', 'advanced_poll') . '/advanced_poll.js',
  );

  return $form;
}

/**
 * Submit handler to add more choices to a poll form.
 *
 * This handler is run regardless of whether JS is enabled or not. It makes
 * changes to the form state. If the button was clicked with JS disabled, then
 * the page is reloaded with the complete rebuilt form. If the button was
 * clicked with JS enabled, then ajax_form_callback() calls poll_choice_js() to
 * return just the changed part of the form.
 */
function advanced_poll_more_choices_submit($form, &$form_state) {
  // If this is a Ajax POST, add 1, otherwise add 5 more choices to the form.
  if ($form_state['values']['advanced_poll_more']) {
    $n = $_GET['q'] == 'system/ajax' ? 1 : 5;
    $form_state['choice_count'] = count($form_state['values']['choice']) + $n;
  }
  // Renumber the choices. This invalidates the corresponding key/value
  // associations in $form_state['input'], so clear that out. This requires
  // advanced_poll_form() to rebuild the choices with the values in
  // $form_state['node']->choice, which it does.
  $form_state['node']->choice = array_values($form_state['values']['choice']);
  unset($form_state['input']['choice']);
  $form_state['rebuild'] = TRUE;
}

function _advanced_poll_choice_form($key, $chid = NULL, $value = '', $votes = 0, $weight = 0, $size = 10) {
  $form = array(
    '#tree' => TRUE,
    '#weight' => $weight,
  );

  // We'll manually set the #parents property of these fields so that
  // their values appear in the $form_state['values']['choice'] array.
  $form['chid'] = array(
    '#type' => 'value',
    '#value' => $chid,
    '#parents' => array('choice', $key, 'chid'),
  );

  $form['chtext'] = array(
    '#type' => 'textfield',
    '#title' => $value !== '' ? t('Choice label') : t('New choice label'),
    '#title_display' => 'invisible',
    '#default_value' => $value,
    '#parents' => array('choice', $key, 'chtext'),
  );

  $form['chvotes'] = array(
    '#type' => 'textfield',
    '#title' => $value !== '' ? t('Vote count for choice @label', array('@label' => $value)) : t('Vote count for new choice'),
    '#title_display' => 'invisible',
    '#default_value' => $votes,
    '#size' => 5,
    '#maxlength' => 7,
    '#parents' => array('choice', $key, 'chvotes'),
    '#access' => user_access('administer nodes'),
    '#element_validate' => array('element_validate_integer'),
  );

  $form['weight'] = array(
    '#type' => 'weight',
    '#title' => $value !== '' ? t('Weight for choice @label', array('@label' => $value)) : t('Weight for new choice'),
    '#title_display' => 'invisible',
    '#default_value' => $weight,
    '#delta' => $size,
    '#parents' => array('choice', $key, 'weight'),
  );

  return $form;
}

/**
 * Ajax callback in response to new choices being added to the form.
 *
 * This returns the new page content to replace the page content made obsolete
 * by the form submission.
 *
 * @see advanced_poll_more_choices_submit()
 */
function advanced_poll_choice_js($form, $form_state) {
  return $form['choice_wrapper']['choice'];
}

/**
 * Form submit handler for node_form().
 *
 * Upon preview and final submission, we need to renumber poll choices and
 * create a teaser output.
 */
function advanced_poll_node_form_submit(&$form, &$form_state) {
  // Renumber choices.
  $form_state['values']['choice'] = array_values($form_state['values']['choice']);
  $form_state['values']['teaser'] = advanced_poll_teaser((object) $form_state['values']);
}

/**
 * Implements hook_validate().
 */
function advanced_poll_validate($node, $form) {
  if (isset($node->title)) {
    // Check for at least two options and validate amount of votes.
    $realchoices = 0;
    foreach ($node->choice as $i => $choice) {
      if ($choice['chtext'] != '') {
        $realchoices++;
      }
      if (isset($choice['chvotes']) && $choice['chvotes'] < 0) {
        form_set_error("choice][$i][chvotes", t('Negative values are not allowed.'));
      }
    }

    if ($realchoices < 2) {
      form_set_error("choice][$realchoices][chtext", t('You must fill in at least two choices.'));
    }
  }
}

/**
 * Implements hook_field_attach_prepare_translation_alter().
 */
function advanced_poll_field_attach_prepare_translation_alter(&$entity, $context) {
  if ($context['entity_type'] == 'node' && $entity->type == 'advanced_poll') {
    $entity->choice = $context['source_entity']->choice;
    foreach ($entity->choice as $i => $options) {
      $entity->choice[$i]['chvotes'] = 0;
    }
  }
}

/**
 * Implements hook_load().
 */
function advanced_poll_load($nodes) {
  global $user;
  foreach ($nodes as $node) {
    $poll = db_query("SELECT active, use_open_date, open_date, use_close_date, close_date, when2show_result, display_type, vote_on_poll FROM {advanced_poll} WHERE nid = :nid", array(':nid' => $node->nid))->fetchObject();

    if (empty($poll)) {
      $poll = new stdClass();
    }

    // Load the appropriate choices into the $poll object.
    $poll->choice = db_select('advanced_poll_choice', 'c')
      ->addTag('translatable')
      ->fields('c', array('chid', 'chtext', 'chvotes', 'weight'))
      ->condition('c.nid', $node->nid)
      ->orderBy('weight')
      ->execute()->fetchAllAssoc('chid', PDO::FETCH_ASSOC);

    // Determine whether or not this user is allowed to vote.
    $poll->allowvotes = FALSE;
    if (user_access('vote on polls') && ( ( !$user->uid && $poll->vote_on_poll == 0 ) || $user->uid ) && $poll->active) {
      if ($user->uid) {
        // If authenticated, find existing vote based on uid.
        $poll->vote = db_query('SELECT chid FROM {advanced_poll_vote} WHERE nid = :nid AND uid = :uid', array(':nid' => $node->nid, ':uid' => $user->uid))->fetchField();
        if (empty($poll->vote)) {
          $poll->vote = -1;
          $poll->allowvotes = TRUE;
        }
      }
      elseif (!empty($_SESSION['advanced_poll_vote'][$node->nid])) {
        // Otherwise the user is anonymous. Look for an existing vote in the
        // user's session.
        $poll->vote = $_SESSION['advanced_poll_vote'][$node->nid];
      }
      else {
        // Finally, query the database for an existing vote based on anonymous
        // user's hostname.
        $poll->allowvotes = !db_query("SELECT 1 FROM {advanced_poll_vote} WHERE nid = :nid AND hostname = :hostname AND uid = 0", array(':nid' => $node->nid, ':hostname' => ip_address()))->fetchField();
      }
    }
    foreach ($poll as $key => $value) {
      $nodes[$node->nid]->$key = $value;
    }
  }
}

/**
 * Implements hook_insert().
 */
function advanced_poll_insert($node) {
  if (!user_access('administer nodes')) {
    // Make sure all votes are 0 initially
    foreach ($node->choice as $i => $choice) {
      $node->choice[$i]['chvotes'] = 0;
    }
    $node->active = 1;
  }

  db_insert('advanced_poll')
    ->fields(array(
      'nid' => $node->nid,
      'use_open_date' => $node->use_open_date,
      'open_date' => $node->open_date['year'].'-'.$node->open_date['month'].'-'.$node->open_date['day'],
      'use_close_date' => $node->use_close_date,
      'close_date' => $node->close_date['year'].'-'.$node->close_date['month'].'-'.$node->close_date['day'],
      'active' => $node->active,
      'display_type' => $node->display_type,
      'when2show_result' => $node->when2show_result,
      'vote_on_poll' => $node->vote_on_poll,
    ))
    ->execute();

  foreach ($node->choice as $choice) {
    if ($choice['chtext'] != '') {
      db_insert('advanced_poll_choice')
        ->fields(array(
          'nid' => $node->nid,
          'chtext' => $choice['chtext'],
          'chvotes' => $choice['chvotes'],
          'weight' => $choice['weight'],
        ))
        ->execute();
    }
  }
}

/**
 * Implements hook_update().
 */
function advanced_poll_update($node) {
  //fix. for problem with date field in drupal 
  $node->open_date = $_POST['open_date'];
  $node->close_date = $_POST['close_date'];
  
  // Update poll settings.
  db_update('advanced_poll')
    ->fields(array(
      //'runtime' => $node->runtime,
      'use_open_date' => $node->use_open_date,
      'open_date' => array2date( $node->open_date ),
      'use_close_date' => $node->use_close_date,
      'close_date' => array2date( $node->close_date ),
      'active' => check_poll_date($node),
      'display_type' => $node->display_type,
      'when2show_result' => $node->when2show_result,
      'vote_on_poll' => $node->vote_on_poll,
    ))
    ->condition('nid', $node->nid)
    ->execute();

  // Advanced Poll choices with empty titles signifies removal. We remove all votes to
  // the removed options, so people who voted on them can vote again.
  foreach ($node->choice as $key => $choice) {
    if (!empty($choice['chtext'])) {
      db_merge('advanced_poll_choice')
        ->key(array('chid' => $choice['chid']))
        ->fields(array(
          'chtext' => $choice['chtext'],
          'chvotes' => (int) $choice['chvotes'],
          'weight' => $choice['weight'],
        ))
        ->insertFields(array(
          'nid' => $node->nid,
          'chtext' => $choice['chtext'],
          'chvotes' => (int) $choice['chvotes'],
          'weight' => $choice['weight'],
        ))
        ->execute();
    }
    else {
      db_delete('advanced_poll_vote')
        ->condition('nid', $node->nid)
        ->condition('chid', $key)
        ->execute();
      db_delete('advanced_poll_choice')
        ->condition('nid', $node->nid)
        ->condition('chid', $choice['chid'])
        ->execute();
    }
  }
}

/**
 * Implements hook_delete().
 */
function advanced_poll_delete($node) {
  db_delete('advanced_poll')
    ->condition('nid', $node->nid)
    ->execute();
  db_delete('advanced_poll_choice')
    ->condition('nid', $node->nid)
    ->execute();
  db_delete('advanced_poll_vote')
    ->condition('nid', $node->nid)
    ->execute();
}

/**
 * Return content for 'latest poll' block.
 *
 * @param $node
 *   The node object to load.
 */
function advanced_poll_block_latest_advanced_poll_view($node) {
  global $user;
  $output = '';

  // This is necessary for shared objects because PHP doesn't copy objects, but
  // passes them by reference.  So when the objects are cached it can result in
  // the wrong output being displayed on subsequent calls.  The cloning and
  // unsetting of $node->content prevents the block output from being the same
  // as the node output.
  $node = clone $node;
  unset($node->content);

  // No 'read more' link.
  $node->readmore = FALSE;
  $node->teaser = '';

  $links = array();
  $links[] = array('title' => t('Older polls'), 'href' => 'advanced_poll', 'attributes' => array('title' => t('View the list of polls on this site.')));
  if ($node->allowvotes) {
    $links[] = array('title' => t('Results'), 'href' => 'node/' . $node->nid . '/results', 'attributes' => array('title' => t('View the current poll results.')));
  }

  $node->links = $links;

  if (!empty($node->allowvotes)) {
    $node->content['advanced_poll_view_voting'] = drupal_get_form('advanced_poll_view_voting', $node, TRUE);
    $node->content['links'] = array(
      '#theme' => 'links',
      '#links' => $node->links,
      '#weight' => 5,
    );
  }
  else {
    $node->content['advanced_poll_view_results'] = array('#markup' => advanced_poll_view_results($node, TRUE, TRUE));
  }

  return $node;
}


/**
 * Implements hook_view().
 */
function advanced_poll_view($node, $view_mode) {
  global $user;
  $output = '';

  if (!empty($node->allowvotes) && empty($node->show_results)) {
    $node->content['advanced_poll_view_voting'] = drupal_get_form('advanced_poll_view_voting', $node);
  }
  else {
    $node->content['advanced_poll_view_results'] = array('#markup' => advanced_poll_view_results($node, $view_mode));
  }
  return $node;
}

/**
 * Creates a simple teaser that lists all the choices.
 *
 * This is primarily used for RSS.
 */
function advanced_poll_teaser($node) {
  $teaser = NULL;
  if (is_array($node->choice)) {
    foreach ($node->choice as $k => $choice) {
      if ($choice['chtext'] != '') {
        $teaser .= '* ' . check_plain($choice['chtext']) . "\n";
      }
    }
  }
  return $teaser;
}

/**
 * Generates the voting form for a advanced_poll.
 *
 * @ingroup forms
 * @see advanced_poll_vote()
 * @see phptemplate_preprocess_advanced_poll_vote()
 */
function advanced_poll_view_voting($form, &$form_state, $node, $block = FALSE) {
  if ($node->choice) {
    $list = array();
    foreach ($node->choice as $i => $choice) {
      $list[$i] = check_plain($choice['chtext']);
    }
    $form['choice'] = array(
      '#type' => 'radios',
      '#title' => t('Choices'),
      '#title_display' => 'invisible',
      '#options' => $list,
    );
  }

  $form['vote'] = array(
    '#type' => 'submit',
    '#value' => t('Vote'),
    '#submit' => array('advanced_poll_vote'),
  );

  // Store the node so we can get to it in submit functions.
  $form['#node'] = $node;
  $form['#block'] = $block;

  // Set form caching because we could have multiple of these forms on
  // the same page, and we want to ensure the right one gets picked.
  $form_state['cache'] = TRUE;

  // Provide a more cleanly named voting form theme.
  $form['#theme'] = 'advanced_poll_vote';
  return $form;
}

/**
 * Validation function for processing votes
 */
function advanced_poll_view_voting_validate($form, &$form_state) {
  if (empty($form_state['values']['choice'])) {
    form_set_error( 'choice', t('Your vote could not be recorded because you did not select any of the choices.'));
  }
}

/**
 * Submit handler for processing a vote.
 */
function advanced_poll_vote($form, &$form_state) {
  $node = $form['#node'];
  $choice = $form_state['values']['choice'];

  global $user;
  db_insert('advanced_poll_vote')
    ->fields(array(
      'nid' => $node->nid,
      'chid' => $choice,
      'uid' => $user->uid,
      'hostname' => ip_address(),
      'timestamp' => REQUEST_TIME,
    ))
    ->execute();

  // Add one to the votes.
  db_update('advanced_poll_choice')
    ->expression('chvotes', 'chvotes + 1')
    ->condition('chid', $choice)
    ->execute();

  cache_clear_all();

  if (!$user->uid) {
    // The vote is recorded so the user gets the result view instead of the
    // voting form when viewing the poll. Saving a value in $_SESSION has the
    // convenient side effect of preventing the user from hitting the page
    // cache. When anonymous voting is allowed, the page cache should only
    // contain the voting form, not the results.
    $_SESSION['advanced_poll_vote'][$node->nid] = $choice;
  }

  drupal_set_message(t('Your vote was recorded.'));

  // Return the user to whatever page they voted from.
}

/**
 * Themes the voting form for a poll.
 *
 * Inputs: $form
 */
function template_preprocess_advanced_poll_vote(&$variables) {
  $form = $variables['form'];
  $variables['choice'] = drupal_render($form['choice']);
  $variables['title'] = check_plain($form['#node']->title);
  $variables['vote'] = drupal_render($form['vote']);
  $variables['rest'] = drupal_render_children($form);
  $variables['block'] = $form['#block'];
  if ($variables['block']) {
    $variables['theme_hook_suggestions'][] = 'advanced_poll_vote__block';
  }
}

/**
 * Generates a graphical representation of the results of a poll.
 */
function advanced_poll_view_results($node, $view_mode, $block = FALSE) {
  // Make sure that choices are ordered by their weight.
  uasort($node->choice, 'drupal_sort_weight');

  // Count the votes and find the maximum.
  $total_votes = 0;
  $max_votes = 0;
  foreach ($node->choice as $choice) {
    if (isset($choice['chvotes'])) {
      $total_votes += $choice['chvotes'];
      $max_votes = max($max_votes, $choice['chvotes']);
    }
  }

  $vote_title = '';
  $advanced_poll_results = '';
  $advanced_poll_chart_results = '';
  $chart_result = array();
  foreach ($node->choice as $i => $choice) {
    if (!empty($choice['chtext'])) {
        $chvotes = isset($choice['chvotes']) ? $choice['chvotes'] : NULL;
        $chart_result[] = "['".$choice['chtext']."', ".( $total_votes > 0 ? intval($chvotes*100/$total_votes) : 0 )."]";
        $advanced_poll_results .= theme('advanced_poll_bar', array('title' => $choice['chtext'], 'votes' => $chvotes, 'total_votes' => $total_votes, 'vote' => isset($node->vote) && $node->vote == $i, 'block' => $block));
      if ( isset($node->vote) && $node->vote == $i )
        $vote_title = $choice['chtext'];
    }
  }
  $advanced_poll_chart_results = $advanced_poll_results;

  $container_id = 'container'.(micro_time()*10000);
  switch ( $node->display_type ) {
        //bar chart
        case 1:
            drupal_add_js('http://zoltan.vis1.dk/frontend/highchart/js/highcharts.js');
            $advanced_poll_chart_results = "
<script>
jQuery(function () {
    jQuery('#".$container_id."').highcharts({
        chart: {
            type: 'column',
            backgroundColor: 'transparent'
        },
        title: {
            text: ''
        },
        subtitle: {
            text: ''
        },
        xAxis: {
            type: 'category',
            labels: {
                rotation: -45,
                style: {
                    fontSize: '12px' 
                }
            }
        },
        yAxis: {
            allowDecimals: false,
            min: 1,
            title: {
                text: ''
            }
        },
        legend: {
            enabled: false
        },
        tooltip: {
            pointFormat: '<b>{point.y}%</b>'
        },
        credits: {
            enabled: false
        },
        series: [{
            color: '#000000',
            name: 'Population',
            data: [".implode( ',', $chart_result )."],
            dataLabels: {
                enabled: true,
                rotation: -90,
                color: '#FFFFFF',
                align: 'right',
                format: '{point.y}%', // one decimal
                y: 10, // 10 pixels down from the top
                style: {
                    fontSize: '12px' 
                }
            },
            pointWidth: 20
        }]
    });
});
</script>
<div id=\"".$container_id."\" style=\"min-width: 310px; height: 400px; max-width: 600px; margin: 0 auto\"></div>";
          break;
        //pie chart
        case 2:
            drupal_add_js('http://zoltan.vis1.dk/frontend/highchart/js/highcharts.js');
            $advanced_poll_chart_results = "
<script>
jQuery(function () {
    jQuery('#".$container_id."').highcharts({
        chart: {
            plotBackgroundColor: null,
            plotBorderWidth: null,
            plotShadow: false,
            backgroundColor: 'transparent'
        },
        credits: {
            enabled: false
        },
        legend: {
            enabled: true
        },
        title: {
            text: ''
        },
        tooltip: {
            pointFormat: '<b>{point.percentage:.0f}%</b>'
        }, 
        plotOptions: {
          pie: {
              allowPointSelect: true,
              cursor: 'pointer',
              dataLabels: {
                  enabled: false
              },
              showInLegend: true
          }
        },
        series: [{
            type: 'pie', 
            data: [".implode( ',', $chart_result )."],
            dataLabels: {
                enabled: true,
                color: '#000000',
                align: 'right',
                format: '{point.y}%', // one decimal
                style: {
                    fontSize: '12px'
                }
            }
        }]
    });
});
</script>
<div id=\"".$container_id."\" style=\"min-width: 310px; height: 400px; max-width: 600px; margin: 0 auto\"></div>";  
          break;
  }

  return theme('advanced_poll_results', array( 'show_date' => ( $node->use_close_date == 1 && $node->active == 1 ? $node->close_date : false ),  'show_result' => ( $node->when2show_result == 1 && $node->active == 0 ) || $node->when2show_result == 0, 'raw_title' => $node->title, 'results' => $advanced_poll_results, 'chart_results' => $advanced_poll_chart_results, 'votes' => $total_votes, 'raw_links' => isset($node->links) ? $node->links : array(), 'block' => $block, 'nid' => $node->nid, 'vote' => isset($node->vote) ? $node->vote : NULL, 'vote_title' => $vote_title ));
}


/**
 * Returns HTML for an admin poll form for choices.
 *
 * @param $variables
 *   An associative array containing:
 *   - form: A render element representing the form.
 *
 * @ingroup themeable
 */
function theme_advanced_poll_choices($variables) {
  $form = $variables['form'];

  drupal_add_tabledrag('advanced_poll-choice-table', 'order', 'sibling', 'advanced_poll-weight');

  $is_admin= user_access('administer nodes');
  $delta = 0;
  $rows = array();
  $headers = array('', t('Choice'));
  if ($is_admin) {
    $headers[] = t('Vote count');
  }
  $headers[] = t('Weight');

  foreach (element_children($form) as $key) {
    $delta++;
    // Set special classes for drag and drop updating.
    $form[$key]['weight']['#attributes']['class'] = array('advanced_poll-weight');

    // Build the table row.
    $row = array(
      'data' => array(
        array('class' => array('choice-flag')),
        drupal_render($form[$key]['chtext']),
      ),
      'class' => array('draggable'),
    );
    if ($is_admin) {
      $row['data'][] = drupal_render($form[$key]['chvotes']);
    }
    $row['data'][] = drupal_render($form[$key]['weight']);

    // Add any additional classes set on the row.
    if (!empty($form[$key]['#attributes']['class'])) {
      $row['class'] = array_merge($row['class'], $form[$key]['#attributes']['class']);
    }

    $rows[] = $row;
  }

  $output = theme('table', array('header' => $headers, 'rows' => $rows, 'attributes' => array('id' => 'advanced_poll-choice-table')));
  $output .= drupal_render_children($form);
  return $output;
}

/**
 * Preprocess the poll_results theme hook.
 *
 * Inputs: $raw_title, $results, $votes, $raw_links, $block, $nid, $vote. The
 * $raw_* inputs to this are naturally unsafe; often safe versions are
 * made to simply overwrite the raw version, but in this case it seems likely
 * that the title and the links may be overridden by the theme layer, so they
 * are left in with a different name for that purpose.
 *
 * @see advanced_poll-results.tpl.php
 * @see advanced_poll-results--block.tpl.php
 */
function template_preprocess_advanced_poll_results(&$variables) {
  $variables['links'] = theme('links__advanced_poll_results', array('links' => $variables['raw_links']));
  if (isset($variables['vote']) && $variables['vote'] > -1 && user_access('cancel own vote')) {
    $elements = drupal_get_form('advanced_poll_cancel_form', $variables['nid']);
    $variables['cancel_form'] = drupal_render($elements);
  }
  $variables['title'] = check_plain($variables['raw_title']);

  if ($variables['block']) {
    $variables['theme_hook_suggestions'][] = 'advanced_poll_results__block';
  }
}

/**
 * Preprocess the poll_bar theme hook.
 *
 * Inputs: $title, $votes, $total_votes, $voted, $block
 *
 * @see advanced_poll-bar.tpl.php
 * @see advanced_poll-bar--block.tpl.php
 */
function template_preprocess_advanced_poll_bar(&$variables) {
  if ($variables['block']) {
    $variables['theme_hook_suggestions'][] = 'advanced_poll_bar__block';
  }
  $variables['title'] = check_plain($variables['title']);
  $variables['percentage'] = round($variables['votes'] * 100 / max($variables['total_votes'], 1));
}

/**
 * Builds the cancel form for a poll.
 *
 * @ingroup forms
 * @see advanced_poll_cancel()
 */
function advanced_poll_cancel_form($form, &$form_state, $nid) {
  $form_state['cache'] = TRUE;

  // Store the nid so we can get to it in submit functions.
  $form['#nid'] = $nid;

  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Cancel your vote'),
    '#submit' => array('advanced_poll_cancel')
  );

  return $form;
}

/**
 * Submit callback for advanced_poll_cancel_form().
 */
function advanced_poll_cancel($form, &$form_state) {
  global $user;
  $node = node_load($form['#nid']);

  db_delete('advanced_poll_vote')
    ->condition('nid', $node->nid)
    ->condition($user->uid ? 'uid' : 'hostname', $user->uid ? $user->uid : ip_address())
    ->execute();

  // Subtract from the votes.
  db_update('advanced_poll_choice')
    ->expression('chvotes', 'chvotes - 1')
    ->condition('chid', $node->vote)
    ->execute();

  unset($_SESSION['advanced_poll_vote'][$node->nid]);

  drupal_set_message(t('Your vote was cancelled.'));
}

/**
 * Implements hook_user_cancel().
 */
function advanced_poll_user_cancel($edit, $account, $method) {
  switch ($method) {
    case 'user_cancel_reassign':
      db_update('advanced_poll_vote')
        ->fields(array('uid' => 0))
        ->condition('uid', $account->uid)
        ->execute();
      break;
  }
}

/**
 * Implements hook_user_delete().
 */
function advanced_poll_user_delete($account) {
  db_delete('advanced_poll_vote')
    ->condition('uid', $account->uid)
    ->execute();
}

/**
 * Implements hook_rdf_mapping().
 */
function advanced_poll_rdf_mapping() {
  return array(
    array(
      'type' => 'node',
      'bundle' => 'advanced_poll',
      'mapping' => array(
        'rdftype' => array('sioc:Post', 'sioct:Advanced Poll'),
      ),
    ),
  );
}